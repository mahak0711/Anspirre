import { CreateChatDto, FindChatDto, HeaderDto } from './dto';
import { InvalidApiKeyError, GeneralChatError, GeneralChatHistoryError, RateLimitExceededError } from './error';
export declare class GeneralChat {
    apiKey: string;
    constructor(obj: HeaderDto);
    /**
     *
     * @param createChatDto {
     * question:string,
     * chatHistory: on/off
     * }
     * @returns
     */
    createChatStream(createChatDto: CreateChatDto): Promise<any>;
    /**
     *
     * @param searchQuery
     * limit :10
     * offset :0
     * createdAt:date
     * sortOrder:DESC/ASC
     * @returns
     */
    getChatHistory(searchQuery: FindChatDto): Promise<any>;
    /**
     *
     * @param createChatDto
     * question:string,
     * chatHistory: on/off
     * @returns
     */
    createChatBlob(createChatDto: CreateChatDto): Promise<any>;
}
export declare const Errors: {
    GeneralChatError: typeof GeneralChatError;
    InvalidApiKeyError: typeof InvalidApiKeyError;
    RateLimitExceededError: typeof RateLimitExceededError;
    GeneralChatHistoryError: typeof GeneralChatHistoryError;
};
declare const _default: {
    GeneralChat: typeof GeneralChat;
    Errors: {
        GeneralChatError: typeof GeneralChatError;
        InvalidApiKeyError: typeof InvalidApiKeyError;
        RateLimitExceededError: typeof RateLimitExceededError;
        GeneralChatHistoryError: typeof GeneralChatHistoryError;
    };
};
export default _default;
