"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Errors = exports.GeneralChat = void 0;
const axios_1 = __importDefault(require("axios"));
const config_1 = require("./config");
const error_1 = require("./error");
const stream_1 = require("stream");
const util_1 = require("util");
class GeneralChat {
    constructor(obj) {
        this.apiKey = obj.apiKey;
    }
    /**
     *
     * @param createChatDto {
     * question:string,
     * chatHistory: on/off
     * }
     * @returns
     */
    createChatStream(createChatDto) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const obj = createChatDto;
            Object.keys(createChatDto).forEach((key) => {
                const typedKey = key;
                if (createChatDto[typedKey] === undefined) {
                    delete obj[typedKey];
                }
            });
            obj['model'] = 'general_assistant';
            const instance = axios_1.default.create({
                baseURL: config_1.SERVER_URL,
                timeout: config_1.TIMEOUT,
                headers: { 'Authorization': `Bearer ${this.apiKey}` },
                responseType: 'stream'
            });
            instance.interceptors.response.use((response) => {
                return response;
            }, (error) => __awaiter(this, void 0, void 0, function* () {
                let data = "";
                yield (0, util_1.promisify)(stream_1.finished)(error.response.data.on("data", (chunk) => {
                    data += chunk.toString();
                }));
                error.response.data = JSON.parse(data);
                error.response.config.responseType = 'json';
                throw error;
            }));
            try {
                const resp = yield instance.post(`/chat/stream`, obj);
                return resp.data;
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    switch ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) {
                        case 403:
                            throw new error_1.InvalidApiKeyError();
                        case 429:
                            throw new error_1.RateLimitExceededError();
                    }
                }
                throw new error_1.GeneralChatError((_c = (_b = error.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.message);
            }
        });
    }
    /**
     *
     * @param searchQuery
     * limit :10
     * offset :0
     * createdAt:date
     * sortOrder:DESC/ASC
     * @returns
     */
    getChatHistory(searchQuery) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            let obj = searchQuery;
            Object.keys(searchQuery).forEach((key) => {
                const typedKey = key;
                if (searchQuery[typedKey] === undefined) {
                    delete obj[typedKey];
                }
            });
            obj['botId'] = 21;
            const instance = axios_1.default.create({
                baseURL: config_1.SERVER_URL,
                timeout: config_1.TIMEOUT,
                headers: { 'Authorization': `Bearer ${this.apiKey}` },
                params: obj
            });
            try {
                const resp = yield instance.get(`/chat/chatHistory`);
                return resp.data;
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    switch ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) {
                        case 403:
                            throw new error_1.InvalidApiKeyError();
                    }
                }
                throw new error_1.GeneralChatHistoryError((_c = (_b = error.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.message);
            }
        });
    }
    /**
     *
     * @param createChatDto
     * question:string,
     * chatHistory: on/off
     * @returns
     */
    createChatBlob(createChatDto) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const obj = createChatDto;
            Object.keys(createChatDto).forEach((key) => {
                const typedKey = key;
                if (createChatDto[typedKey] === undefined) {
                    delete obj[typedKey];
                }
            });
            obj['model'] = 'general_assistant';
            const instance = axios_1.default.create({
                baseURL: config_1.SERVER_URL,
                timeout: config_1.TIMEOUT,
                headers: { 'Authorization': `Bearer ${this.apiKey}` }
            });
            try {
                const resp = yield instance.post(`/chat/blob`, obj);
                return resp.data;
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    switch ((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) {
                        case 403:
                            throw new error_1.InvalidApiKeyError();
                        case 429:
                            throw new error_1.RateLimitExceededError();
                    }
                }
                throw new error_1.GeneralChatError((_c = (_b = error.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.message);
            }
        });
    }
}
exports.GeneralChat = GeneralChat;
exports.Errors = {
    GeneralChatError: error_1.GeneralChatError,
    InvalidApiKeyError: error_1.InvalidApiKeyError,
    RateLimitExceededError: error_1.RateLimitExceededError,
    GeneralChatHistoryError: error_1.GeneralChatHistoryError
};
exports.default = { GeneralChat, Errors: exports.Errors };
